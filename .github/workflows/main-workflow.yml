name: CI/CD Pipeline
on:
  pull_request:
    branches: [ main, nightly ]
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      simulate_nightly:
        description: 'Simulate nightly run (includes integration tests and merge)'
        required: false
        default: true
        type: boolean
permissions:
  contents: write
  pull-requests: read
jobs:
  build-and-test:
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'nightly') || 
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.simulate_nightly == true)) && 'nightly' || github.ref }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Set up environment
        run: |
          npm install
          cd server
          npm install
          cd ../client
          npm install
      - name: Build
        run: |
          node --loader ts-node/esm build.ts
      - name: Run unit tests
        run: |
          npm run test:unit
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            server/dist/
            server/public/
            client/dist/

  nightly-integration:
    needs: build-and-test
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.simulate_nightly == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: nightly
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Set up environment for integration tests
        run: |
          npm install
          cd server
          npm install
          cd ../client
          npm install
      - name: Restore artifacts to correct locations
        run: |
          cp -r dist/server/dist/* server/dist/ 2>/dev/null || true
          cp -r dist/server/public/* server/public/ 2>/dev/null || true
          cp -r dist/client/dist/* client/dist/ 2>/dev/null || true
      - name: Run integration tests
        run: |
          npm run test:integration
      - name: Merge nightly to main
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git remote set-url origin https://x-access-token:${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin main
          git checkout main
          git merge --no-ff nightly -m "Auto-merge nightly to main [$(date)]"
          git push origin main

  deploy-production:
    needs: nightly-integration
    if: always() && (needs.nightly-integration.result == 'success' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Restore client build for Docker
        run: |
          mkdir -p client/dist
          cp -r dist/client/dist/* client/dist/ 2>/dev/null || true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build --platform linux/amd64 -t hearts-game-server .
          docker tag hearts-game-server gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:${{ github.sha }}
          docker tag hearts-game-server gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:latest
          docker push gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:${{ github.sha }}
          docker push gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:latest

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone=${{ secrets.GKE_ZONE }}

      - name: Deploy to GKE
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/ingress.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl set image deployment/hearts-game-deployment hearts-game-server=gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:${{ github.sha }}
          kubectl rollout status deployment/hearts-game-deployment
          kubectl get services

      - name: Output deployment info
        run: |
          echo "Deployment complete!"
          echo "Ingress IP: $(kubectl get ingress hearts-https -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
          echo "Visit: https://team19.cs144.org"