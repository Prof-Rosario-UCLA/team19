name: CI/CD Pipeline
on:
  pull_request:
    branches: [ main, nightly ]
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      simulate_nightly:
        description: 'Simulate nightly run (includes integration tests and merge)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: read

jobs:
  build-and-test:
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'nightly') || 
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.simulate_nightly == true)) && 'nightly' || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          npm install
          cd server && npm install
          cd ../client && npm install

      - name: Build application
        run: |
          echo "Building client and server..."
          node --loader ts-node/esm build.ts
          
          echo "Verifying build outputs..."
          echo "Server dist files:"
          ls -la server/dist/ || echo "No server/dist directory"
          
          echo "Client files (should be in server/public/):"
          ls -la server/public/ || echo "No server/public directory"
          
          echo "Making sure index.html exists:"
          find server/public/ -name "index.html" || echo "No index.html found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            server/dist/
            server/public/

  nightly-integration:
    needs: build-and-test
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.simulate_nightly == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: nightly
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies for integration tests
        run: |
          npm install
          cd server && npm install
          cd ../client && npm install

      - name: Restore build artifacts for integration tests
        run: |
          echo "Restoring build artifacts for integration tests..."
          
          # Restore server build
          if [ -d "dist/server/dist" ]; then
            cp -r dist/server/dist/* server/dist/
            echo "Server dist files restored"
          else
            echo "No server dist files found"
          fi
          
          # Restore client build
          if [ -d "dist/server/public" ]; then
            cp -r dist/server/public/* server/public/
            echo "Client files restored to server/public/"
          else
            echo "No client files found in server/public/"
          fi

      - name: Run integration tests
        run: npm run test:integration

      - name: Merge nightly to main
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git remote set-url origin https://x-access-token:${{ secrets.BOT_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin main
          git checkout main
          git merge --no-ff nightly -m "Auto-merge nightly to main [$(date)]"
          git push origin main

  deploy-production:
    needs: nightly-integration
    if: always() && (needs.nightly-integration.result == 'success' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Debug available artifacts
        run: |
          echo "Debugging available artifacts..."
          echo "Artifact structure:"
          find dist/ -type f | head -20
          echo "Directories in dist/:"
          ls -la dist/

      - name: Restore build files for Docker
        run: |
          echo "Restoring build files for Docker build..."

          # Create target directories
          mkdir -p server/dist
          mkdir -p server/public

          # Restore server build files (artifacts are in dist/dist/, not dist/server/dist/)
          if [ -d "dist/dist" ]; then
            cp -r dist/dist/* server/dist/
            echo "Server build files restored"
            echo "Server dist contents:"
            ls -la server/dist/
          else
            echo "ERROR: No server build files found in dist/dist"
            exit 1
          fi

          # Restore client build files (artifacts are in dist/public/, not dist/server/public/)
          if [ -d "dist/public" ]; then
            cp -r dist/public/* server/public/
            echo "Client build files restored"
            echo "Client files contents:"
            ls -la server/public/
            echo "Index.html check:"
            ls -la server/public/index.html || echo "No index.html found"
          else
            echo "ERROR: No client build files found in dist/public"
            exit 1
          fi

          echo "Final verification - files ready for Docker:"
          echo "server/dist/:"
          ls -la server/dist/ | head -5
          echo "server/public/:"
          ls -la server/public/

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          echo "Building Docker image..."
          docker build --platform linux/amd64 \
            --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg DB_USER="${{ secrets.DB_USER }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --build-arg NODE_ENV="production" \
            -t hearts-game-server .
          
          echo "Tagging and pushing images..."
          docker tag hearts-game-server gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:${{ github.sha }}
          docker tag hearts-game-server gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:latest
          docker push gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:${{ github.sha }}
          docker push gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:latest
          echo "Docker images pushed successfully"

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone=${{ secrets.GKE_ZONE }}

      - name: Deploy to GKE
        run: |
          echo "Deploying to Kubernetes..."
          
          # Update secrets
          kubectl delete secret hearts-app-secrets --ignore-not-found=true
          kubectl create secret generic hearts-app-secrets \
            --from-literal=DB_HOST="${{ secrets.DB_HOST }}" \
            --from-literal=DB_NAME="${{ secrets.DB_NAME }}" \
            --from-literal=DB_USER="${{ secrets.DB_USER }}" \
            --from-literal=DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}"
          
          # Apply configurations
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl apply -f kubernetes/ingress.yaml
          
          # Update deployment with new image
          kubectl set image deployment/hearts-game-deployment hearts-game-server=gcr.io/${{ secrets.GKE_PROJECT }}/hearts-game-server:${{ github.sha }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/hearts-game-deployment
          
          echo "Deployment completed"

      - name: Output deployment info
        run: |
          echo "Deployment Summary:"
          echo "====================="
          kubectl get pods -l app=hearts-game
          echo ""
          echo "Services:"
          kubectl get services hearts-game-service
          echo ""
          echo "Ingress:"
          kubectl get ingress hearts-https
          echo ""
          echo "App should be available at: https://team19.cs144.org"
          echo "Health check: https://team19.cs144.org/api/health"
